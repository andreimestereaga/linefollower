
t24.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000005dc  00000670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000055  00800064  00800064  00000674  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000117  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a1  00000000  00000000  000007cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000247  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000752  00000000  00000000  000012b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001a08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001dd  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000832  00000000  00000000  00001c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000024a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ec ed       	ldi	r30, 0xDC	; 220
  32:	f5 e0       	ldi	r31, 0x05	; 5
  34:	02 c0       	rjmp	.+4      	; 0x3a <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0

0000003a <.do_copy_data_start>:
  3a:	a4 36       	cpi	r26, 0x64	; 100
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <.do_copy_data_loop>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a4 e6       	ldi	r26, 0x64	; 100
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a9 3b       	cpi	r26, 0xB9	; 185
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	a1 d0       	rcall	.+322    	; 0x194 <main>
  52:	c2 c2       	rjmp	.+1412   	; 0x5d8 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <init_turbine>:
#define MS_1_8	180


void init_turbine(){

	SET_TIMER_REG1;
  56:	8f b5       	in	r24, 0x2f	; 47
  58:	80 68       	ori	r24, 0x80	; 128
  5a:	8f bd       	out	0x2f, r24	; 47
	SET_TIMER_REG2;
  5c:	8e b5       	in	r24, 0x2e	; 46
  5e:	82 61       	ori	r24, 0x12	; 18
  60:	8e bd       	out	0x2e, r24	; 46


	SET_TOP_LVL_ICR;
  62:	80 e1       	ldi	r24, 0x10	; 16
  64:	97 e2       	ldi	r25, 0x27	; 39
  66:	95 bd       	out	0x25, r25	; 37
  68:	84 bd       	out	0x24, r24	; 36

	TURBINE_SET_PORT;
  6a:	d6 9a       	sbi	0x1a, 6	; 26

	SET_TOP_LVL_OCR;
  6c:	9b bd       	out	0x2b, r25	; 43
  6e:	8a bd       	out	0x2a, r24	; 42
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  70:	28 ec       	ldi	r18, 0xC8	; 200
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	f9 01       	movw	r30, r18
  76:	31 97       	sbiw	r30, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <init_turbine+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  7a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  7c:	d9 f7       	brne	.-10     	; 0x74 <init_turbine+0x1e>
	_delay_ms(1000);


	TIMER_COMPARE_REG = 0;
  7e:	1b bc       	out	0x2b, r1	; 43
  80:	1a bc       	out	0x2a, r1	; 42
  82:	80 e1       	ldi	r24, 0x10	; 16
  84:	97 e2       	ldi	r25, 0x27	; 39
  86:	28 ec       	ldi	r18, 0xC8	; 200
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	f9 01       	movw	r30, r18
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <init_turbine+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  90:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  92:	d9 f7       	brne	.-10     	; 0x8a <init_turbine+0x34>
	_delay_ms(1000);

	
	TIMER_COMPARE_REG = 0;
  94:	1b bc       	out	0x2b, r1	; 43
  96:	1a bc       	out	0x2a, r1	; 42
	turbine_lvl = 500;
  98:	84 ef       	ldi	r24, 0xF4	; 244
  9a:	91 e0       	ldi	r25, 0x01	; 1
  9c:	90 93 61 00 	sts	0x0061, r25
  a0:	80 93 60 00 	sts	0x0060, r24
}
  a4:	08 95       	ret

000000a6 <_sys_init>:

void init_turbine();

void _sys_init(){

	dbg_tx_init();
  a6:	c0 9a       	sbi	0x18, 0	; 24
  a8:	b8 9a       	sbi	0x17, 0	; 23
	init_turbine();
  aa:	d5 df       	rcall	.-86     	; 0x56 <init_turbine>

	SET_SENSOR_INPUT;
  ac:	d8 9a       	sbi	0x1b, 0	; 27
	SET_LED;
  ae:	d3 9a       	sbi	0x1a, 3	; 26

	LED_ON;
  b0:	db 9a       	sbi	0x1b, 3	; 27
  b2:	84 ef       	ldi	r24, 0xF4	; 244
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	28 ec       	ldi	r18, 0xC8	; 200
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	f9 01       	movw	r30, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <_sys_init+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c2:	d9 f7       	brne	.-10     	; 0xba <_sys_init+0x14>
	_delay_ms(50);
	LED_OFF;
  c4:	db 98       	cbi	0x1b, 3	; 27
  c6:	84 ef       	ldi	r24, 0xF4	; 244
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	28 ec       	ldi	r18, 0xC8	; 200
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <_sys_init+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d6:	d9 f7       	brne	.-10     	; 0xce <_sys_init+0x28>
	_delay_ms(50);
	LED_ON;
  d8:	db 9a       	sbi	0x1b, 3	; 27
  da:	88 ee       	ldi	r24, 0xE8	; 232
  dc:	93 e0       	ldi	r25, 0x03	; 3
  de:	28 ec       	ldi	r18, 0xC8	; 200
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	f9 01       	movw	r30, r18
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <__stack+0x5>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__stack+0x3>
	_delay_ms(100);
	LED_OFF;
  ec:	db 98       	cbi	0x1b, 3	; 27

};
  ee:	08 95       	ret

000000f0 <set_turbine>:
	
	TIMER_COMPARE_REG = 0;
	turbine_lvl = 500;
}

uint8_t set_turbine(uint16_t value){
  f0:	9c 01       	movw	r18, r24
	
	uint8_t ret_val = 0;
	if( (value >= 500) && (value <= 1000)){
  f2:	84 5f       	subi	r24, 0xF4	; 244
  f4:	91 40       	sbci	r25, 0x01	; 1
  f6:	85 5f       	subi	r24, 0xF5	; 245
  f8:	91 40       	sbci	r25, 0x01	; 1
  fa:	10 f0       	brcs	.+4      	; 0x100 <set_turbine+0x10>
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	08 95       	ret
		TIMER_COMPARE_REG = value;
 100:	3b bd       	out	0x2b, r19	; 43
 102:	2a bd       	out	0x2a, r18	; 42
 104:	81 e0       	ldi	r24, 0x01	; 1
		ret_val = 1;
	}

	return ret_val;
}
 106:	08 95       	ret

00000108 <stop_turbine>:

void stop_turbine(){
	TIMER_COMPARE_REG = 0x0000;
 108:	1b bc       	out	0x2b, r1	; 43
 10a:	1a bc       	out	0x2a, r1	; 42
	turbine_lvl = 500;
 10c:	84 ef       	ldi	r24, 0xF4	; 244
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	90 93 61 00 	sts	0x0061, r25
 114:	80 93 60 00 	sts	0x0060, r24
}
 118:	08 95       	ret

0000011a <max_turbine>:

void max_turbine(){
	TIMER_COMPARE_REG = 700;
 11a:	8c eb       	ldi	r24, 0xBC	; 188
 11c:	92 e0       	ldi	r25, 0x02	; 2
 11e:	9b bd       	out	0x2b, r25	; 43
 120:	8a bd       	out	0x2a, r24	; 42
 122:	80 e1       	ldi	r24, 0x10	; 16
 124:	97 e2       	ldi	r25, 0x27	; 39
 126:	28 ec       	ldi	r18, 0xC8	; 200
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <max_turbine+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 130:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 132:	d9 f7       	brne	.-10     	; 0x12a <max_turbine+0x10>
	turbine_lvl = 700;

	_delay_ms(1000);

	TIMER_COMPARE_REG = 800;
 134:	80 e2       	ldi	r24, 0x20	; 32
 136:	93 e0       	ldi	r25, 0x03	; 3
 138:	9b bd       	out	0x2b, r25	; 43
 13a:	8a bd       	out	0x2a, r24	; 42
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	97 e2       	ldi	r25, 0x27	; 39
 140:	28 ec       	ldi	r18, 0xC8	; 200
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <max_turbine+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 14c:	d9 f7       	brne	.-10     	; 0x144 <max_turbine+0x2a>
	turbine_lvl = 800;

	_delay_ms(1000);


	TIMER_COMPARE_REG = 900;
 14e:	84 e8       	ldi	r24, 0x84	; 132
 150:	93 e0       	ldi	r25, 0x03	; 3
 152:	9b bd       	out	0x2b, r25	; 43
 154:	8a bd       	out	0x2a, r24	; 42
 156:	88 e8       	ldi	r24, 0x88	; 136
 158:	93 e1       	ldi	r25, 0x13	; 19
 15a:	28 ec       	ldi	r18, 0xC8	; 200
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	f9 01       	movw	r30, r18
 160:	31 97       	sbiw	r30, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <max_turbine+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 164:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 166:	d9 f7       	brne	.-10     	; 0x15e <max_turbine+0x44>
	turbine_lvl = 900;

	_delay_ms(500);


	TIMER_COMPARE_REG = 950;
 168:	86 eb       	ldi	r24, 0xB6	; 182
 16a:	93 e0       	ldi	r25, 0x03	; 3
 16c:	9b bd       	out	0x2b, r25	; 43
 16e:	8a bd       	out	0x2a, r24	; 42
 170:	88 e8       	ldi	r24, 0x88	; 136
 172:	93 e1       	ldi	r25, 0x13	; 19
 174:	28 ec       	ldi	r18, 0xC8	; 200
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	f9 01       	movw	r30, r18
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <max_turbine+0x60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 180:	d9 f7       	brne	.-10     	; 0x178 <max_turbine+0x5e>
	turbine_lvl = 950;

	_delay_ms(500);

	TIMER_COMPARE_REG = 1000;
 182:	88 ee       	ldi	r24, 0xE8	; 232
 184:	93 e0       	ldi	r25, 0x03	; 3
 186:	9b bd       	out	0x2b, r25	; 43
 188:	8a bd       	out	0x2a, r24	; 42
	turbine_lvl = 1000;
 18a:	90 93 61 00 	sts	0x0061, r25
 18e:	80 93 60 00 	sts	0x0060, r24



}
 192:	08 95       	ret

00000194 <main>:



int main(){
 194:	af 92       	push	r10
 196:	bf 92       	push	r11
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
	
	_sys_init();	
 1a8:	7e df       	rcall	.-260    	; 0xa6 <_sys_init>
			for(idx = 0; idx < 75; idx++){
			
				if(signal_periods[idx] != 0){
					if( (signal_periods[idx] > 85) && (signal_periods[idx] < 110)){
						
						signal_code |=  (1 << signal_shifter);
 1aa:	31 e0       	ldi	r19, 0x01	; 1
 1ac:	e3 2e       	mov	r14, r19
 1ae:	f1 2c       	mov	r15, r1
				}
			}
			for(idx = 0; idx < 75; idx++){
				signal_periods[idx] = 0;
			}
			dec_state = DECODE_MSG;
 1b0:	22 e0       	ldi	r18, 0x02	; 2
 1b2:	b2 2e       	mov	r11, r18
			if( (hold_counter > MS_1) && (sig_lvl != sig_lvl_prev)){
				hold_counter = 0;
				signal_shifter = 0;
				signal_code = 0;
				idx = 0;
				dec_state = CHECK_SIG;
 1b4:	93 e0       	ldi	r25, 0x03	; 3
 1b6:	a9 2e       	mov	r10, r25
	return ret_val;
}

void stop_turbine(){
	TIMER_COMPARE_REG = 0x0000;
	turbine_lvl = 500;
 1b8:	04 ef       	ldi	r16, 0xF4	; 244
 1ba:	11 e0       	ldi	r17, 0x01	; 1
 1bc:	c8 ec       	ldi	r28, 0xC8	; 200
 1be:	d0 e0       	ldi	r29, 0x00	; 0
			else if(hold_counter > 200){
				idx++;
			}

			if(idx == 74){
				dec_state = START_RCV;
 1c0:	dd 24       	eor	r13, r13
 1c2:	d3 94       	inc	r13
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1c4:	8a e1       	ldi	r24, 0x1A	; 26
 1c6:	c8 2e       	mov	r12, r24
	while(1){


	
	
	sig_lvl = GET_DEC_LVL;
 1c8:	89 b3       	in	r24, 0x19	; 25
 1ca:	81 70       	andi	r24, 0x01	; 1
 1cc:	80 93 6c 00 	sts	0x006C, r24

	

	switch(dec_state){
 1d0:	80 91 69 00 	lds	r24, 0x0069
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	09 f4       	brne	.+2      	; 0x1da <main+0x46>
 1d8:	70 c0       	rjmp	.+224    	; 0x2ba <main+0x126>
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	38 f0       	brcs	.+14     	; 0x1ec <main+0x58>
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <main+0x50>
 1e2:	d5 c0       	rjmp	.+426    	; 0x38e <main+0x1fa>
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	09 f0       	breq	.+2      	; 0x1ea <main+0x56>
 1e8:	d2 c1       	rjmp	.+932    	; 0x58e <main+0x3fa>
 1ea:	28 c0       	rjmp	.+80     	; 0x23c <main+0xa8>
		
		case IDLE:
		{
			

			if( (hold_counter > MS_1) && (sig_lvl != sig_lvl_prev)){
 1ec:	80 91 6a 00 	lds	r24, 0x006A
 1f0:	90 91 6b 00 	lds	r25, 0x006B
 1f4:	85 36       	cpi	r24, 0x65	; 101
 1f6:	91 05       	cpc	r25, r1
 1f8:	c0 f0       	brcs	.+48     	; 0x22a <main+0x96>
 1fa:	90 91 6c 00 	lds	r25, 0x006C
 1fe:	80 91 62 00 	lds	r24, 0x0062
 202:	98 17       	cp	r25, r24
 204:	91 f0       	breq	.+36     	; 0x22a <main+0x96>
				hold_counter = 0;
 206:	10 92 6b 00 	sts	0x006B, r1
 20a:	10 92 6a 00 	sts	0x006A, r1
				signal_shifter = 0;
 20e:	10 92 68 00 	sts	0x0068, r1
				signal_code = 0;
 212:	10 92 64 00 	sts	0x0064, r1
 216:	10 92 65 00 	sts	0x0065, r1
 21a:	10 92 66 00 	sts	0x0066, r1
 21e:	10 92 67 00 	sts	0x0067, r1
				idx = 0;
 222:	10 92 6d 00 	sts	0x006D, r1
				dec_state = CHECK_SIG;
 226:	a0 92 69 00 	sts	0x0069, r10
			}
			
			if(sig_lvl == 0){
 22a:	80 91 6c 00 	lds	r24, 0x006C
 22e:	88 23       	and	r24, r24
 230:	d1 f1       	breq	.+116    	; 0x2a6 <main+0x112>
				hold_counter++;
			}
			else{
				hold_counter = 0;
 232:	10 92 6b 00 	sts	0x006B, r1
 236:	10 92 6a 00 	sts	0x006A, r1
 23a:	a9 c1       	rjmp	.+850    	; 0x58e <main+0x3fa>
		break;

		case CHECK_SIG:
		{

			if((sig_lvl != sig_lvl_prev)){
 23c:	90 91 6c 00 	lds	r25, 0x006C
 240:	80 91 62 00 	lds	r24, 0x0062
 244:	98 17       	cp	r25, r24
 246:	79 f0       	breq	.+30     	; 0x266 <main+0xd2>
				
				signal_periods[idx] = (uint8_t)hold_counter;
 248:	e0 91 6d 00 	lds	r30, 0x006D
 24c:	80 91 6a 00 	lds	r24, 0x006A
 250:	90 91 6b 00 	lds	r25, 0x006B
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	e2 59       	subi	r30, 0x92	; 146
 258:	ff 4f       	sbci	r31, 0xFF	; 255
 25a:	80 83       	st	Z, r24
				hold_counter = 0;
 25c:	10 92 6b 00 	sts	0x006B, r1
 260:	10 92 6a 00 	sts	0x006A, r1
 264:	07 c0       	rjmp	.+14     	; 0x274 <main+0xe0>
				idx++;
			}
			else if(hold_counter > 200){
 266:	80 91 6a 00 	lds	r24, 0x006A
 26a:	90 91 6b 00 	lds	r25, 0x006B
 26e:	89 3c       	cpi	r24, 0xC9	; 201
 270:	91 05       	cpc	r25, r1
 272:	28 f0       	brcs	.+10     	; 0x27e <main+0xea>
				idx++;
 274:	80 91 6d 00 	lds	r24, 0x006D
 278:	8f 5f       	subi	r24, 0xFF	; 255
 27a:	80 93 6d 00 	sts	0x006D, r24
			}

			if(idx == 74){
 27e:	80 91 6d 00 	lds	r24, 0x006D
 282:	8a 34       	cpi	r24, 0x4A	; 74
 284:	41 f4       	brne	.+16     	; 0x296 <main+0x102>
				dec_state = START_RCV;
 286:	d0 92 69 00 	sts	0x0069, r13
				hold_counter = 0;
 28a:	10 92 6b 00 	sts	0x006B, r1
 28e:	10 92 6a 00 	sts	0x006A, r1
				idx = 0;
 292:	10 92 6d 00 	sts	0x006D, r1
			}
	
			if(hold_counter == 255){
 296:	80 91 6a 00 	lds	r24, 0x006A
 29a:	90 91 6b 00 	lds	r25, 0x006B
 29e:	8f 3f       	cpi	r24, 0xFF	; 255
 2a0:	91 05       	cpc	r25, r1
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <main+0x112>
 2a4:	74 c1       	rjmp	.+744    	; 0x58e <main+0x3fa>

			}
			else
			{
				hold_counter++;
 2a6:	80 91 6a 00 	lds	r24, 0x006A
 2aa:	90 91 6b 00 	lds	r25, 0x006B
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	90 93 6b 00 	sts	0x006B, r25
 2b4:	80 93 6a 00 	sts	0x006A, r24
 2b8:	6a c1       	rjmp	.+724    	; 0x58e <main+0x3fa>
		}	
		break;

		case START_RCV:
		{
			for(idx = 0; idx < 75; idx++){
 2ba:	10 92 6d 00 	sts	0x006D, r1
 2be:	20 91 64 00 	lds	r18, 0x0064
 2c2:	30 91 65 00 	lds	r19, 0x0065
 2c6:	40 91 66 00 	lds	r20, 0x0066
 2ca:	50 91 67 00 	lds	r21, 0x0067
 2ce:	60 91 68 00 	lds	r22, 0x0068
 2d2:	3a c0       	rjmp	.+116    	; 0x348 <main+0x1b4>
			
				if(signal_periods[idx] != 0){
 2d4:	e0 91 6d 00 	lds	r30, 0x006D
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	e2 59       	subi	r30, 0x92	; 146
 2dc:	ff 4f       	sbci	r31, 0xFF	; 255
 2de:	80 81       	ld	r24, Z
 2e0:	88 23       	and	r24, r24
 2e2:	b1 f1       	breq	.+108    	; 0x350 <main+0x1bc>
					if( (signal_periods[idx] > 85) && (signal_periods[idx] < 110)){
 2e4:	e0 91 6d 00 	lds	r30, 0x006D
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	e2 59       	subi	r30, 0x92	; 146
 2ec:	ff 4f       	sbci	r31, 0xFF	; 255
 2ee:	80 81       	ld	r24, Z
 2f0:	86 35       	cpi	r24, 0x56	; 86
 2f2:	c0 f0       	brcs	.+48     	; 0x324 <main+0x190>
 2f4:	e0 91 6d 00 	lds	r30, 0x006D
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	e2 59       	subi	r30, 0x92	; 146
 2fc:	ff 4f       	sbci	r31, 0xFF	; 255
 2fe:	80 81       	ld	r24, Z
 300:	8e 36       	cpi	r24, 0x6E	; 110
 302:	80 f4       	brcc	.+32     	; 0x324 <main+0x190>
						
						signal_code |=  (1 << signal_shifter);
 304:	c7 01       	movw	r24, r14
 306:	06 2e       	mov	r0, r22
 308:	02 c0       	rjmp	.+4      	; 0x30e <main+0x17a>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	0a 94       	dec	r0
 310:	e2 f7       	brpl	.-8      	; 0x30a <main+0x176>
 312:	aa 27       	eor	r26, r26
 314:	97 fd       	sbrc	r25, 7
 316:	a0 95       	com	r26
 318:	ba 2f       	mov	r27, r26
 31a:	28 2b       	or	r18, r24
 31c:	39 2b       	or	r19, r25
 31e:	4a 2b       	or	r20, r26
 320:	5b 2b       	or	r21, r27
 322:	0a c0       	rjmp	.+20     	; 0x338 <main+0x1a4>

					}
					else if( (signal_periods[idx] > 40) && (signal_periods[idx] < 60)){
 324:	e0 91 6d 00 	lds	r30, 0x006D
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	e2 59       	subi	r30, 0x92	; 146
 32c:	ff 4f       	sbci	r31, 0xFF	; 255
 32e:	80 81       	ld	r24, Z
 330:	89 32       	cpi	r24, 0x29	; 41
 332:	10 f0       	brcs	.+4      	; 0x338 <main+0x1a4>
 334:	80 91 6d 00 	lds	r24, 0x006D
 338:	6f 5f       	subi	r22, 0xFF	; 255

					}
						signal_shifter++;

						if(signal_shifter == 32){
 33a:	60 32       	cpi	r22, 0x20	; 32
 33c:	49 f0       	breq	.+18     	; 0x350 <main+0x1bc>
		}	
		break;

		case START_RCV:
		{
			for(idx = 0; idx < 75; idx++){
 33e:	80 91 6d 00 	lds	r24, 0x006D
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	80 93 6d 00 	sts	0x006D, r24
 348:	80 91 6d 00 	lds	r24, 0x006D
 34c:	8b 34       	cpi	r24, 0x4B	; 75
 34e:	10 f2       	brcs	.-124    	; 0x2d4 <main+0x140>
 350:	20 93 64 00 	sts	0x0064, r18
 354:	30 93 65 00 	sts	0x0065, r19
 358:	40 93 66 00 	sts	0x0066, r20
 35c:	50 93 67 00 	sts	0x0067, r21
 360:	60 93 68 00 	sts	0x0068, r22
				}
				else{
					break;
				}
			}
			for(idx = 0; idx < 75; idx++){
 364:	10 92 6d 00 	sts	0x006D, r1
 368:	0b c0       	rjmp	.+22     	; 0x380 <main+0x1ec>
				signal_periods[idx] = 0;
 36a:	e0 91 6d 00 	lds	r30, 0x006D
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	e2 59       	subi	r30, 0x92	; 146
 372:	ff 4f       	sbci	r31, 0xFF	; 255
 374:	10 82       	st	Z, r1
				}
				else{
					break;
				}
			}
			for(idx = 0; idx < 75; idx++){
 376:	80 91 6d 00 	lds	r24, 0x006D
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	80 93 6d 00 	sts	0x006D, r24
 380:	80 91 6d 00 	lds	r24, 0x006D
 384:	8b 34       	cpi	r24, 0x4B	; 75
 386:	88 f3       	brcs	.-30     	; 0x36a <main+0x1d6>
				signal_periods[idx] = 0;
			}
			dec_state = DECODE_MSG;
 388:	b0 92 69 00 	sts	0x0069, r11
 38c:	00 c1       	rjmp	.+512    	; 0x58e <main+0x3fa>
		break;

		case DECODE_MSG:
		{
		
			if(signal_code == STOP_CMD_1 || signal_code == STOP_CMD_2){
 38e:	80 91 64 00 	lds	r24, 0x0064
 392:	90 91 65 00 	lds	r25, 0x0065
 396:	a0 91 66 00 	lds	r26, 0x0066
 39a:	b0 91 67 00 	lds	r27, 0x0067
 39e:	80 33       	cpi	r24, 0x30	; 48
 3a0:	20 e7       	ldi	r18, 0x70	; 112
 3a2:	92 07       	cpc	r25, r18
 3a4:	20 e0       	ldi	r18, 0x00	; 0
 3a6:	a2 07       	cpc	r26, r18
 3a8:	20 e0       	ldi	r18, 0x00	; 0
 3aa:	b2 07       	cpc	r27, r18
 3ac:	41 f0       	breq	.+16     	; 0x3be <main+0x22a>
 3ae:	8f 30       	cpi	r24, 0x0F	; 15
 3b0:	4c e1       	ldi	r20, 0x1C	; 28
 3b2:	94 07       	cpc	r25, r20
 3b4:	40 e0       	ldi	r20, 0x00	; 0
 3b6:	a4 07       	cpc	r26, r20
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	b4 07       	cpc	r27, r20
 3bc:	59 f4       	brne	.+22     	; 0x3d4 <main+0x240>
				dbg_putchar(0x55);
 3be:	85 e5       	ldi	r24, 0x55	; 85
 3c0:	ee d0       	rcall	.+476    	; 0x59e <dbg_putchar>
				dbg_putchar(0xAA);
 3c2:	8a ea       	ldi	r24, 0xAA	; 170
 3c4:	ec d0       	rcall	.+472    	; 0x59e <dbg_putchar>

	return ret_val;
}

void stop_turbine(){
	TIMER_COMPARE_REG = 0x0000;
 3c6:	1b bc       	out	0x2b, r1	; 43
 3c8:	1a bc       	out	0x2a, r1	; 42
	turbine_lvl = 500;
 3ca:	10 93 61 00 	sts	0x0061, r17
 3ce:	00 93 60 00 	sts	0x0060, r16
 3d2:	db c0       	rjmp	.+438    	; 0x58a <main+0x3f6>
			if(signal_code == STOP_CMD_1 || signal_code == STOP_CMD_2){
				dbg_putchar(0x55);
				dbg_putchar(0xAA);
				stop_turbine();
			}
			else if(TURBINE_UP_1 == signal_code || TURBINE_UP_2 == signal_code){
 3d4:	8c 30       	cpi	r24, 0x0C	; 12
 3d6:	21 e6       	ldi	r18, 0x61	; 97
 3d8:	92 07       	cpc	r25, r18
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	a2 07       	cpc	r26, r18
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	b2 07       	cpc	r27, r18
 3e2:	41 f0       	breq	.+16     	; 0x3f4 <main+0x260>
 3e4:	83 34       	cpi	r24, 0x43	; 67
 3e6:	48 e1       	ldi	r20, 0x18	; 24
 3e8:	94 07       	cpc	r25, r20
 3ea:	40 e0       	ldi	r20, 0x00	; 0
 3ec:	a4 07       	cpc	r26, r20
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	b4 07       	cpc	r27, r20
 3f2:	d1 f4       	brne	.+52     	; 0x428 <main+0x294>
				
				if(set_turbine( (uint16_t)(turbine_lvl + 50)) ){
 3f4:	80 91 60 00 	lds	r24, 0x0060
 3f8:	90 91 61 00 	lds	r25, 0x0061
 3fc:	9c 01       	movw	r18, r24
 3fe:	2e 5c       	subi	r18, 0xCE	; 206
 400:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t set_turbine(uint16_t value){
	
	uint8_t ret_val = 0;
	if( (value >= 500) && (value <= 1000)){
 402:	82 5c       	subi	r24, 0xC2	; 194
 404:	91 40       	sbci	r25, 0x01	; 1
 406:	85 5f       	subi	r24, 0xF5	; 245
 408:	91 40       	sbci	r25, 0x01	; 1
 40a:	30 f4       	brcc	.+12     	; 0x418 <main+0x284>
		TIMER_COMPARE_REG = value;
 40c:	3b bd       	out	0x2b, r19	; 43
 40e:	2a bd       	out	0x2a, r18	; 42
				stop_turbine();
			}
			else if(TURBINE_UP_1 == signal_code || TURBINE_UP_2 == signal_code){
				
				if(set_turbine( (uint16_t)(turbine_lvl + 50)) ){
				turbine_lvl += 50;
 410:	30 93 61 00 	sts	0x0061, r19
 414:	20 93 60 00 	sts	0x0060, r18
 418:	88 ee       	ldi	r24, 0xE8	; 232
 41a:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 41c:	fe 01       	movw	r30, r28
 41e:	31 97       	sbiw	r30, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <main+0x28a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 422:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 424:	d9 f7       	brne	.-10     	; 0x41c <main+0x288>
 426:	b1 c0       	rjmp	.+354    	; 0x58a <main+0x3f6>
				}
				_delay_ms(100);
			}
			else if(TURBINE_DOWN_1 == signal_code || TURBINE_DOWN_2 == signal_code){
 428:	83 30       	cpi	r24, 0x03	; 3
 42a:	21 e0       	ldi	r18, 0x01	; 1
 42c:	92 07       	cpc	r25, r18
 42e:	20 e0       	ldi	r18, 0x00	; 0
 430:	a2 07       	cpc	r26, r18
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	b2 07       	cpc	r27, r18
 436:	41 f0       	breq	.+16     	; 0x448 <main+0x2b4>
 438:	8c 30       	cpi	r24, 0x0C	; 12
 43a:	44 e0       	ldi	r20, 0x04	; 4
 43c:	94 07       	cpc	r25, r20
 43e:	40 e0       	ldi	r20, 0x00	; 0
 440:	a4 07       	cpc	r26, r20
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	b4 07       	cpc	r27, r20
 446:	d1 f4       	brne	.+52     	; 0x47c <main+0x2e8>
				if(set_turbine( (uint16_t)(turbine_lvl - 50)) ){
 448:	80 91 60 00 	lds	r24, 0x0060
 44c:	90 91 61 00 	lds	r25, 0x0061
 450:	9c 01       	movw	r18, r24
 452:	22 53       	subi	r18, 0x32	; 50
 454:	30 40       	sbci	r19, 0x00	; 0
}

uint8_t set_turbine(uint16_t value){
	
	uint8_t ret_val = 0;
	if( (value >= 500) && (value <= 1000)){
 456:	86 52       	subi	r24, 0x26	; 38
 458:	92 40       	sbci	r25, 0x02	; 2
 45a:	85 5f       	subi	r24, 0xF5	; 245
 45c:	91 40       	sbci	r25, 0x01	; 1
 45e:	30 f4       	brcc	.+12     	; 0x46c <main+0x2d8>
		TIMER_COMPARE_REG = value;
 460:	3b bd       	out	0x2b, r19	; 43
 462:	2a bd       	out	0x2a, r18	; 42
				}
				_delay_ms(100);
			}
			else if(TURBINE_DOWN_1 == signal_code || TURBINE_DOWN_2 == signal_code){
				if(set_turbine( (uint16_t)(turbine_lvl - 50)) ){
				turbine_lvl -= 50;
 464:	30 93 61 00 	sts	0x0061, r19
 468:	20 93 60 00 	sts	0x0060, r18
 46c:	88 ee       	ldi	r24, 0xE8	; 232
 46e:	93 e0       	ldi	r25, 0x03	; 3
 470:	fe 01       	movw	r30, r28
 472:	31 97       	sbiw	r30, 0x01	; 1
 474:	f1 f7       	brne	.-4      	; 0x472 <main+0x2de>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 476:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 478:	d9 f7       	brne	.-10     	; 0x470 <main+0x2dc>
 47a:	87 c0       	rjmp	.+270    	; 0x58a <main+0x3f6>
			}
				_delay_ms(100);
			}
			else if(START_1 == signal_code || START_2 == signal_code){
 47c:	8c 30       	cpi	r24, 0x0C	; 12
 47e:	2f e0       	ldi	r18, 0x0F	; 15
 480:	92 07       	cpc	r25, r18
 482:	20 e0       	ldi	r18, 0x00	; 0
 484:	a2 07       	cpc	r26, r18
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	b2 07       	cpc	r27, r18
 48a:	41 f0       	breq	.+16     	; 0x49c <main+0x308>
 48c:	83 3c       	cpi	r24, 0xC3	; 195
 48e:	43 e0       	ldi	r20, 0x03	; 3
 490:	94 07       	cpc	r25, r20
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	a4 07       	cpc	r26, r20
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	b4 07       	cpc	r27, r20
 49a:	61 f4       	brne	.+24     	; 0x4b4 <main+0x320>
				dbg_putchar(0x55);
 49c:	85 e5       	ldi	r24, 0x55	; 85
 49e:	7f d0       	rcall	.+254    	; 0x59e <dbg_putchar>
				dbg_putchar(0xFF);
 4a0:	8f ef       	ldi	r24, 0xFF	; 255
 4a2:	7d d0       	rcall	.+250    	; 0x59e <dbg_putchar>
 4a4:	88 ee       	ldi	r24, 0xE8	; 232
 4a6:	93 e0       	ldi	r25, 0x03	; 3
 4a8:	fe 01       	movw	r30, r28
 4aa:	31 97       	sbiw	r30, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <main+0x316>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4b0:	d9 f7       	brne	.-10     	; 0x4a8 <main+0x314>
 4b2:	6b c0       	rjmp	.+214    	; 0x58a <main+0x3f6>
				_delay_ms(100);
			}
			

			else if(PID_P_INC_1 == signal_code || PID_P_INC_2 == signal_code){
 4b4:	83 3c       	cpi	r24, 0xC3	; 195
 4b6:	91 05       	cpc	r25, r1
 4b8:	a1 05       	cpc	r26, r1
 4ba:	b1 05       	cpc	r27, r1
 4bc:	41 f0       	breq	.+16     	; 0x4ce <main+0x33a>
 4be:	8c 30       	cpi	r24, 0x0C	; 12
 4c0:	23 e0       	ldi	r18, 0x03	; 3
 4c2:	92 07       	cpc	r25, r18
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	a2 07       	cpc	r26, r18
 4c8:	20 e0       	ldi	r18, 0x00	; 0
 4ca:	b2 07       	cpc	r27, r18
 4cc:	71 f4       	brne	.+28     	; 0x4ea <main+0x356>
				dbg_putchar(0x55);
 4ce:	85 e5       	ldi	r24, 0x55	; 85
 4d0:	66 d0       	rcall	.+204    	; 0x59e <dbg_putchar>
				dbg_putchar(0xF1);
 4d2:	81 ef       	ldi	r24, 0xF1	; 241
 4d4:	64 d0       	rcall	.+200    	; 0x59e <dbg_putchar>
				dbg_putchar(0xAA);
 4d6:	8a ea       	ldi	r24, 0xAA	; 170
 4d8:	62 d0       	rcall	.+196    	; 0x59e <dbg_putchar>
 4da:	88 ee       	ldi	r24, 0xE8	; 232
 4dc:	93 e0       	ldi	r25, 0x03	; 3
 4de:	fe 01       	movw	r30, r28
 4e0:	31 97       	sbiw	r30, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <main+0x34c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4e6:	d9 f7       	brne	.-10     	; 0x4de <main+0x34a>
 4e8:	50 c0       	rjmp	.+160    	; 0x58a <main+0x3f6>
				_delay_ms(100);
			}
			else if(PID_P_DEC_1 == signal_code || PID_P_DEC_2 == signal_code){
 4ea:	80 33       	cpi	r24, 0x30	; 48
 4ec:	40 e4       	ldi	r20, 0x40	; 64
 4ee:	94 07       	cpc	r25, r20
 4f0:	40 e0       	ldi	r20, 0x00	; 0
 4f2:	a4 07       	cpc	r26, r20
 4f4:	40 e0       	ldi	r20, 0x00	; 0
 4f6:	b4 07       	cpc	r27, r20
 4f8:	41 f0       	breq	.+16     	; 0x50a <main+0x376>
 4fa:	8f 30       	cpi	r24, 0x0F	; 15
 4fc:	20 e1       	ldi	r18, 0x10	; 16
 4fe:	92 07       	cpc	r25, r18
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	a2 07       	cpc	r26, r18
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	b2 07       	cpc	r27, r18
 508:	71 f4       	brne	.+28     	; 0x526 <main+0x392>
				dbg_putchar(0x55);
 50a:	85 e5       	ldi	r24, 0x55	; 85
 50c:	48 d0       	rcall	.+144    	; 0x59e <dbg_putchar>
				dbg_putchar(0xF2);
 50e:	82 ef       	ldi	r24, 0xF2	; 242
 510:	46 d0       	rcall	.+140    	; 0x59e <dbg_putchar>
				dbg_putchar(0xAA);
 512:	8a ea       	ldi	r24, 0xAA	; 170
 514:	44 d0       	rcall	.+136    	; 0x59e <dbg_putchar>
 516:	88 ee       	ldi	r24, 0xE8	; 232
 518:	93 e0       	ldi	r25, 0x03	; 3
 51a:	fe 01       	movw	r30, r28
 51c:	31 97       	sbiw	r30, 0x01	; 1
 51e:	f1 f7       	brne	.-4      	; 0x51c <main+0x388>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 520:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 522:	d9 f7       	brne	.-10     	; 0x51a <main+0x386>
 524:	32 c0       	rjmp	.+100    	; 0x58a <main+0x3f6>
				_delay_ms(100);
			}
			else if(PID_D_DEC_1 == signal_code || PID_D_DEC_2 == signal_code){
 526:	83 30       	cpi	r24, 0x03	; 3
 528:	91 05       	cpc	r25, r1
 52a:	a1 05       	cpc	r26, r1
 52c:	b1 05       	cpc	r27, r1
 52e:	29 f0       	breq	.+10     	; 0x53a <main+0x3a6>
 530:	8c 30       	cpi	r24, 0x0C	; 12
 532:	91 05       	cpc	r25, r1
 534:	a1 05       	cpc	r26, r1
 536:	b1 05       	cpc	r27, r1
 538:	71 f4       	brne	.+28     	; 0x556 <main+0x3c2>
				dbg_putchar(0x55);
 53a:	85 e5       	ldi	r24, 0x55	; 85
 53c:	30 d0       	rcall	.+96     	; 0x59e <dbg_putchar>
				dbg_putchar(0xD2);
 53e:	82 ed       	ldi	r24, 0xD2	; 210
 540:	2e d0       	rcall	.+92     	; 0x59e <dbg_putchar>
				dbg_putchar(0xAA);
 542:	8a ea       	ldi	r24, 0xAA	; 170
 544:	2c d0       	rcall	.+88     	; 0x59e <dbg_putchar>
 546:	88 ee       	ldi	r24, 0xE8	; 232
 548:	93 e0       	ldi	r25, 0x03	; 3
 54a:	fe 01       	movw	r30, r28
 54c:	31 97       	sbiw	r30, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <main+0x3b8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 550:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 552:	d9 f7       	brne	.-10     	; 0x54a <main+0x3b6>
 554:	1a c0       	rjmp	.+52     	; 0x58a <main+0x3f6>
				_delay_ms(100);
			}
			else if(PID_D_INC_1 == signal_code || PID_D_INC_2 == signal_code){
 556:	8c 30       	cpi	r24, 0x0C	; 12
 558:	40 e3       	ldi	r20, 0x30	; 48
 55a:	94 07       	cpc	r25, r20
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	a4 07       	cpc	r26, r20
 560:	40 e0       	ldi	r20, 0x00	; 0
 562:	b4 07       	cpc	r27, r20
 564:	29 f0       	breq	.+10     	; 0x570 <main+0x3dc>
 566:	83 50       	subi	r24, 0x03	; 3
 568:	9c 40       	sbci	r25, 0x0C	; 12
 56a:	a0 40       	sbci	r26, 0x00	; 0
 56c:	b0 40       	sbci	r27, 0x00	; 0
 56e:	69 f4       	brne	.+26     	; 0x58a <main+0x3f6>
				dbg_putchar(0x55);
 570:	85 e5       	ldi	r24, 0x55	; 85
 572:	15 d0       	rcall	.+42     	; 0x59e <dbg_putchar>
				dbg_putchar(0xD1);
 574:	81 ed       	ldi	r24, 0xD1	; 209
 576:	13 d0       	rcall	.+38     	; 0x59e <dbg_putchar>
				dbg_putchar(0xAA);
 578:	8a ea       	ldi	r24, 0xAA	; 170
 57a:	11 d0       	rcall	.+34     	; 0x59e <dbg_putchar>
 57c:	88 ee       	ldi	r24, 0xE8	; 232
 57e:	93 e0       	ldi	r25, 0x03	; 3
 580:	fe 01       	movw	r30, r28
 582:	31 97       	sbiw	r30, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <main+0x3ee>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 586:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 588:	d9 f7       	brne	.-10     	; 0x580 <main+0x3ec>
			
			
			
			

			dec_state = IDLE;
 58a:	10 92 69 00 	sts	0x0069, r1
		{
		}
		break;
	}

	sig_lvl_prev = sig_lvl;
 58e:	80 91 6c 00 	lds	r24, 0x006C
 592:	80 93 62 00 	sts	0x0062, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 596:	8c 2d       	mov	r24, r12
 598:	8a 95       	dec	r24
 59a:	f1 f7       	brne	.-4      	; 0x598 <main+0x404>
 59c:	15 ce       	rjmp	.-982    	; 0x1c8 <main+0x34>

0000059e <dbg_putchar>:
#include "dbg_putchar.h"

#if DBG_UART_ENABLE

void dbg_putchar(uint8_t c)
{
 59e:	28 2f       	mov	r18, r24
#define DBG_UART_TX_NUM_ADD_NOP		((F_CPU/DBG_UART_BAUDRATE-16)%4)
	uint8_t sreg;
	uint16_t tmp;
	uint8_t numiter = 10;

	sreg = SREG;
 5a0:	8f b7       	in	r24, 0x3f	; 63
	cli();
 5a2:	f8 94       	cli

	asm volatile (
 5a4:	9a e0       	ldi	r25, 0x0A	; 10
 5a6:	e8 b3       	in	r30, 0x18	; 24
 5a8:	ee 7f       	andi	r30, 0xFE	; 254
 5aa:	e8 bb       	out	0x18, r30	; 24
	...
 5b4:	00 00       	nop
 5b6:	ed ec       	ldi	r30, 0xCD	; 205
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	31 97       	sbiw	r30, 0x01	; 1
 5bc:	f1 f7       	brne	.-4      	; 0x5ba <dbg_putchar+0x1c>
 5be:	00 00       	nop
 5c0:	e8 b3       	in	r30, 0x18	; 24
 5c2:	20 fd       	sbrc	r18, 0
 5c4:	e1 60       	ori	r30, 0x01	; 1
 5c6:	20 ff       	sbrs	r18, 0
 5c8:	ee 7f       	andi	r30, 0xFE	; 254
 5ca:	e8 bb       	out	0x18, r30	; 24
 5cc:	08 94       	sec
 5ce:	27 95       	ror	r18
 5d0:	9a 95       	dec	r25
 5d2:	89 f7       	brne	.-30     	; 0x5b6 <dbg_putchar+0x18>
		  "M" (1<<DBG_UART_TX_PIN),
		  "i" (DBG_UART_TX_NUM_DELAY_CYCLES),
		  "1" (c),			/* data */
		  "2" (numiter)
	);
	SREG = sreg;
 5d4:	8f bf       	out	0x3f, r24	; 63
}
 5d6:	08 95       	ret

000005d8 <_exit>:
 5d8:	f8 94       	cli

000005da <__stop_program>:
 5da:	ff cf       	rjmp	.-2      	; 0x5da <__stop_program>
